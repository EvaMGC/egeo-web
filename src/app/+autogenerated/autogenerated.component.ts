/*
 * Copyright (C) 2016 Stratio (http://stratio.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, OnDestroy } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs/Observable';
import { Subscription } from 'rxjs/Subscription';
import { unescape as _unescape } from 'lodash';

import { ApiDoc, TYPES } from '../shared';
import { Documentation, CodeApi } from '../shared/automatic-doc/automatic-doc.model';
import { AutomaticDocService } from '../shared/automatic-doc/automatic-doc.service';

@Component({
   selector: 'st-autogenerated-doc',
   templateUrl: './autogenerated.component.html'
})
export class StAutogeneratedDocComponent implements OnDestroy {

   public apiDoc: ApiDoc = {
      title: 'TEST',
      description: '',
      haveModel: false,
      apiSection: { inputs: [], outputs: [] },
      exampleDesc: ''
   };
   public examples: CodeApi[] = [];
   public models: CodeApi[] = [];

   private docPath: string = '';
   private docs: Documentation;
   private subs: Subscription;

   constructor(
      private _automaticDocService: AutomaticDocService,
      private _route: ActivatedRoute
   ) {
      this.docPath = _route.snapshot.params.id;
      this.subs = _automaticDocService.getDocumentation(this.docPath).subscribe(doc => this.onResponse(doc));
   }

   ngOnDestroy(): void {
      if (this.subs) {
         this.subs.unsubscribe();
      }
   }

   private onResponse(doc: Documentation): void {
      this.docs = doc;
      this.apiDoc.title = doc.title;
      this.apiDoc.description = doc.description;
      this.apiDoc.apiSection.description = doc.api.description;
      this.examples = doc.example;
      this.models = doc.model;
      this.apiDoc.haveModel = (doc.model && doc.model.length > 0);
      this.apiDoc.apiSection.inputs = [];
      if (doc.api.inputs && doc.api.inputs.length > 0) {
         doc.api.inputs.forEach(input => {
            this.apiDoc.apiSection.inputs.push({
               paramName: _unescape(input.name),
               type: _unescape(input.type),
               required: input.required,
               details: _unescape(input.description + (input.defaultValue && input.defaultValue.length > 0 ? `, DEFAULT=${input.defaultValue}` : ''))
            });
         });
      }

      this.apiDoc.apiSection.outputs = [];
      if (doc.api.outputs && doc.api.outputs.length > 0) {
         doc.api.outputs.forEach(ouput => {
            this.apiDoc.apiSection.outputs.push({
               paramName: _unescape(ouput.name),
               type: _unescape(ouput.type),
               required: false,
               details: _unescape(ouput.description)
            });
         });
      }
   }
}

